---
/** Replacement for <article> in blog posts. Primarily contains typography styling */
export type Props = astroHTML.JSX.IntrinsicElements["article"];
const { ...props } = Astro.props;
---

<article {...props}>
  <slot />
</article>

<style>
  article {
    margin: 0 auto;
    font-family: var(--font-sans, sans-serif);
    line-height: var(--font-lineheight, 1.725em);
    padding: 3.75rem 0; /* add a bit of padding to the top and bottom of the article for readability */
    overflow-wrap: break-word;
    word-break: break-word;
  }
  /* resize the article width and child inset as the screen becomes smaller */
  article {
    --article-max-width: 37rem;
    --article-inset: 1rem; /* used by children to inset them, if they need to be */
    max-width: var(--article-max-width);
  }
  @media (min-width: 45rem) {
    article {
      --article-inset: 2.5rem;
      --article-max-width: 43.75rem;
    }
  }
  @media (min-width: 60rem) {
    article {
      --article-max-width: 51.75rem;
      --article-inset: 4rem;
    }
  }
  /* inset children using low specificity, so they can easily overwrite it if they want to */
  :where(article) > :global(:where(:not(img, figure, pre))) {
    padding-left: var(--article-inset);
    padding-right: var(--article-inset);
  }

  /* style child images to avoid scroll */
  article :global(img) {
    max-width: 100%;
    height: auto;
    margin-left: auto;
    margin-right: auto;
    z-index: var(--z-noshadow);
    position: relative; /* otherwise z-index won't work */
    border-radius: 6px;
    box-shadow:
      0 1px 1px hsl(0deg 0% 0% / 0.05),
      0 2px 2px hsl(0deg 0% 0% / 0.05),
      0 6px 6px hsl(0deg 0% 0% / 0.05),
      0 16px 16px hsl(0deg 0% 0% / 0.05);
  }
  article > :global(.expressive-code) {
    padding-left: 0;
    padding-right: 0;
    margin-bottom: 1.75rem;
    z-index: var(--z-noshadow);
    position: relative; /* otherwise z-index won't work */
  }

  /* typography - paragraphs */
  article :global(p) {
    color: var(--c-text, #333);
    font-size: 1rem;
    margin-top: 0;
    margin-bottom: 1.75rem;
    position: relative;
    line-height: var(--font-lineheight, 1.725em);
  }
  @media (min-width: 45rem) {
    article :global(p) {
      font-size: 1.125rem;
      line-height: var(--font-lineheight, 1.725em);
    }
  }
  /* typography - headers */
  article :global(h2) {
    font-size: 2rem;
  }
  article :global(:where(h1, h2, h3)) {
    margin-top: calc(2 * 0.83em + 1.25rem);
  }
  /* typography - links */
  article :global(a) {
    color: var(--c-text-emphasis, #000);
  }
  @media (min-width: 30rem) {
    article :global(p a[title]) {
      text-decoration: underline;
      text-decoration-style: dotted;
      -webkit-text-decoration: underline dotted;
    }
  }
  /* typography - lists */
  article > :global(:is(ul, ol)) {
    padding-left: calc(var(--article-inset) + 2rem);
  }
  article :global(li::marker) {
    color: var(--c-text-secondary);
    font-family: var(--font-headings);
  }
  /* typography - tables */
  article :global(:where(table)) {
    width: calc(100% - 2 * var(--article-inset));
    padding: initial;
    margin-left: var(--article-inset);
    margin-right: var(--article-inset);
    border-collapse: collapse;
    margin-bottom: 1.25rem;
  }
  article :global(:where(td, th)) {
    border-left: 1px solid var(--c-border);
    padding: 0.25rem 0.5rem;
  }
  article :global(:where(td:first-child, th:first-child)) {
    border-left: none;
  }
  article :global(:where(th)) {
    border-bottom: 2px solid var(--c-border);
    border-bottom-color: color-mix(
      in oklch,
      var(--c-border) 90%,
      var(--c-text)
    );
  }

  article :global(hr) {
    border: none;
    border-bottom: 2px solid var(--c-accent);
    padding: 0;
    width: 2rem;
    margin: 0 auto 1.75rem;
  }
</style>
