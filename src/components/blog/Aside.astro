---
/** Replacement for <aside> in blog posts. Displays as a floated block in the article */
export type Props = astroHTML.JSX.IntrinsicElements["aside"] & {
  "data-left"?: boolean;
  "data-up"?: boolean;
};
const { "data-left": left = false, "data-up": up = false, class: className, ...props } = Astro.props;
---

<div class="aside-wrapper">
  <aside {...props} class:list={[className, left ? "left" : "right", up ? "up" : "down"]}>
    <slot />
  </aside>
</div>

<style>
  .aside-wrapper {
    position: relative;
    padding: 0;
  }
  /* On very small screens, we display the aside inline with the text */
  aside {
    position: static;
    font-size: 0.85rem;
    line-height: 1.33em;
    position: relative;
    color: var(--c-text-secondary, #666);
    position: relative;
    font-style: italic;
    margin-bottom: 1rem;
    overflow-wrap: break-word;
    word-break: break-word;
  }
  aside > :global(*) {
    margin-bottom: 1rem;
  }
  /* on bigger screens we position them next to the text */
  @media (min-width: 90rem) {
    /* breakpoint should be at `calc(--article-max-width + 10rem + small buffer)` - in this case we've used a buffer of 1rem */
    aside {
      padding: 0;
      width: 15rem;
      z-index: 1;
    }
    aside.down {
      margin-top: 0.25rem;
      margin-bottom: var(--paragraph-spacing, 1.75rem);
    }
    aside.up {
      margin-top: var(--paragraph-spacing, 1.75rem);
      margin-bottom: 0.25rem;
      bottom: 0;
    }
    aside.right {
      position: absolute;
      left: 100%;
      margin-left: 2.5rem;
    }
    aside.left {
      position: absolute;
      right: 100%;
    }
    aside :global(blockquote) {
      margin-inline: 0;
    }
  }
</style>
